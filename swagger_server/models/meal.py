# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Meal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, meal_id: int=None, food_name: str=None, description: str=None, calorie: int=None, _date: str=None, time: str=None, is_in_days_limit: bool=None):  # noqa: E501
        """Meal - a model defined in Swagger

        :param meal_id: The meal_id of this Meal.  # noqa: E501
        :type meal_id: int
        :param food_name: The food_name of this Meal.  # noqa: E501
        :type food_name: str
        :param description: The description of this Meal.  # noqa: E501
        :type description: str
        :param calorie: The calorie of this Meal.  # noqa: E501
        :type calorie: int
        :param _date: The _date of this Meal.  # noqa: E501
        :type _date: str
        :param time: The time of this Meal.  # noqa: E501
        :type time: str
        :param is_in_days_limit: The is_in_days_limit of this Meal.  # noqa: E501
        :type is_in_days_limit: bool
        """
        self.swagger_types = {
            'meal_id': int,
            'food_name': str,
            'description': str,
            'calorie': int,
            '_date': str,
            'time': str,
            'is_in_days_limit': bool
        }

        self.attribute_map = {
            'meal_id': 'meal_id',
            'food_name': 'food_name',
            'description': 'description',
            'calorie': 'calorie',
            '_date': 'date',
            'time': 'time',
            'is_in_days_limit': 'is_in_days_limit'
        }

        self._meal_id = meal_id
        self._food_name = food_name
        self._description = description
        self._calorie = calorie
        self.__date = _date
        self._time = time
        self._is_in_days_limit = is_in_days_limit

    @classmethod
    def from_dict(cls, dikt) -> 'Meal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meal of this Meal.  # noqa: E501
        :rtype: Meal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meal_id(self) -> int:
        """Gets the meal_id of this Meal.


        :return: The meal_id of this Meal.
        :rtype: int
        """
        return self._meal_id

    @meal_id.setter
    def meal_id(self, meal_id: int):
        """Sets the meal_id of this Meal.


        :param meal_id: The meal_id of this Meal.
        :type meal_id: int
        """

        self._meal_id = meal_id

    @property
    def food_name(self) -> str:
        """Gets the food_name of this Meal.


        :return: The food_name of this Meal.
        :rtype: str
        """
        return self._food_name

    @food_name.setter
    def food_name(self, food_name: str):
        """Sets the food_name of this Meal.


        :param food_name: The food_name of this Meal.
        :type food_name: str
        """

        self._food_name = food_name

    @property
    def description(self) -> str:
        """Gets the description of this Meal.


        :return: The description of this Meal.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Meal.


        :param description: The description of this Meal.
        :type description: str
        """

        self._description = description

    @property
    def calorie(self) -> int:
        """Gets the calorie of this Meal.


        :return: The calorie of this Meal.
        :rtype: int
        """
        return self._calorie

    @calorie.setter
    def calorie(self, calorie: int):
        """Sets the calorie of this Meal.


        :param calorie: The calorie of this Meal.
        :type calorie: int
        """

        self._calorie = calorie

    @property
    def _date(self) -> str:
        """Gets the _date of this Meal.


        :return: The _date of this Meal.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date: str):
        """Sets the _date of this Meal.


        :param _date: The _date of this Meal.
        :type _date: str
        """

        self.__date = _date

    @property
    def time(self) -> str:
        """Gets the time of this Meal.


        :return: The time of this Meal.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this Meal.


        :param time: The time of this Meal.
        :type time: str
        """

        self._time = time

    @property
    def is_in_days_limit(self) -> bool:
        """Gets the is_in_days_limit of this Meal.


        :return: The is_in_days_limit of this Meal.
        :rtype: bool
        """
        return self._is_in_days_limit

    @is_in_days_limit.setter
    def is_in_days_limit(self, is_in_days_limit: bool):
        """Sets the is_in_days_limit of this Meal.


        :param is_in_days_limit: The is_in_days_limit of this Meal.
        :type is_in_days_limit: bool
        """

        self._is_in_days_limit = is_in_days_limit
